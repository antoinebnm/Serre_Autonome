import sensorService from "../services/sensorService.js";
import { asyncWrapper } from "../utils/asyncWrapper.js";

export const getAllLightValues = asyncWrapper(async (req, res) => {
  const { startTime, endTime } = req.query;

  // Si des paramÃ¨tres de temps sont fournis, les utiliser pour filtrer
  if (startTime && endTime) {
    console.log(
      `RequÃªte getAllLightValues avec filtres: startTime=${startTime}, endTime=${endTime}`
    );

    // S'assurer que les timestamps sont des nombres
    let startTimestamp, endTimestamp;
    try {
      startTimestamp = Number(startTime);
      endTimestamp = Number(endTime);

      if (isNaN(startTimestamp) || isNaN(endTimestamp)) {
        return res
          .status(400)
          .json({ error: "Les timestamps doivent Ãªtre des nombres" });
      }

      console.log(
        `Timestamps convertis: start=${startTimestamp}, end=${endTimestamp}`
      );

      const data = await sensorService.getLightValuesBetween(
        startTimestamp,
        endTimestamp
      );
      console.log(`DonnÃ©es retournÃ©es: ${data.length} enregistrements`);
      return res.json(data);
    } catch (error) {
      console.error(
        "Erreur lors de la rÃ©cupÃ©ration des valeurs de luminositÃ©:",
        error
      );
      return res
        .status(500)
        .json({ error: `Erreur serveur: ${error.message}` });
    }
  }

  // Sinon, retourner toutes les valeurs
  const data = await sensorService.getAllLightValues();
  res.json(data);
});

export const getLightValuesBetween = asyncWrapper(async (req, res) => {
  const { start, end } = req.query;
  if (!start || !end) {
    return res
      .status(400)
      .json({ error: "Les paramÃ¨tres start et end sont requis" });
  }

  console.log(
    `RequÃªte getLightValuesBetween reÃ§ue avec start=${start}, end=${end}`
  );

  // S'assurer que les timestamps sont des nombres
  let startTimestamp, endTimestamp;
  try {
    startTimestamp = Number(start);
    endTimestamp = Number(end);

    if (isNaN(startTimestamp) || isNaN(endTimestamp)) {
      return res
        .status(400)
        .json({ error: "Les timestamps doivent Ãªtre des nombres" });
    }

    console.log(
      `Timestamps convertis: start=${startTimestamp}, end=${endTimestamp}`
    );

    const data = await sensorService.getLightValuesBetween(
      startTimestamp,
      endTimestamp
    );
    console.log(`DonnÃ©es retournÃ©es: ${data.length} enregistrements`);
    return res.json(data);
  } catch (error) {
    console.error(
      "Erreur lors de la rÃ©cupÃ©ration des valeurs de luminositÃ©:",
      error
    );
    return res.status(500).json({ error: `Erreur serveur: ${error.message}` });
  }
});

export const createLight = asyncWrapper(async (req, res) => {
  const { value } = req.body;
  if (value === undefined) {
    return res.status(400).json({ error: "La valeur est requise" });
  }

  const data = await sensorService.createLight(Number(value));
  res.status(201).json(data);
});

export const getAllTemperatureValues = asyncWrapper(async (req, res) => {
  const { startTime, endTime } = req.query;

  // Si des paramÃ¨tres de temps sont fournis, les utiliser pour filtrer
  if (startTime && endTime) {
    console.log(
      `RequÃªte getAllTemperatureValues avec filtres: startTime=${startTime}, endTime=${endTime}`
    );

    // S'assurer que les timestamps sont des nombres
    let startTimestamp, endTimestamp;
    try {
      startTimestamp = Number(startTime);
      endTimestamp = Number(endTime);

      if (isNaN(startTimestamp) || isNaN(endTimestamp)) {
        return res
          .status(400)
          .json({ error: "Les timestamps doivent Ãªtre des nombres" });
      }
      console.log(
        `Timestamps convertis: start=${startTimestamp}, end=${endTimestamp}`
      );

      let data = await sensorService.getTemperatureValuesBetween(
        startTimestamp,
        endTimestamp
      );

      // Si aucune donnÃ©e trouvÃ©e, essayer de rÃ©cupÃ©rer les derniÃ¨res donnÃ©es disponibles
      if (!data || (Array.isArray(data) && data.length === 0)) {
        console.log(
          "ğŸŸ¨ [TEMPERATURE] Aucune donnÃ©e dans la pÃ©riode, rÃ©cupÃ©ration des derniÃ¨res donnÃ©es"
        );
        data = await sensorService.getAllTemperatureValues();
        // Limiter aux 50 derniers points pour Ã©viter de surcharger l'interface
        if (data && Array.isArray(data) && data.length > 50) {
          data = data.slice(0, 50);
        }
      }

      console.log(
        `ğŸŸ¢ [TEMPERATURE] DonnÃ©es retournÃ©es: ${
          Array.isArray(data) ? data.length : 0
        } enregistrements`
      );
      return res.json(data);
    } catch (error) {
      console.error(
        "Erreur lors de la rÃ©cupÃ©ration des valeurs de tempÃ©rature:",
        error
      );
      return res
        .status(500)
        .json({ error: `Erreur serveur: ${error.message}` });
    }
  }

  // Sinon, retourner toutes les valeurs
  const data = await sensorService.getAllTemperatureValues();
  res.json(data);
});

export const getTemperatureValuesBetween = asyncWrapper(async (req, res) => {
  const { start, end } = req.query;
  if (!start || !end) {
    return res
      .status(400)
      .json({ error: "Les paramÃ¨tres start et end sont requis" });
  }

  console.log(
    `RequÃªte getTemperatureValuesBetween reÃ§ue avec start=${start}, end=${end}`
  );

  // S'assurer que les timestamps sont des nombres
  let startTimestamp, endTimestamp;
  try {
    startTimestamp = Number(start);
    endTimestamp = Number(end);

    if (isNaN(startTimestamp) || isNaN(endTimestamp)) {
      return res
        .status(400)
        .json({ error: "Les timestamps doivent Ãªtre des nombres" });
    }

    console.log(
      `Timestamps convertis: start=${startTimestamp}, end=${endTimestamp}`
    );

    const data = await sensorService.getTemperatureValuesBetween(
      startTimestamp,
      endTimestamp
    );
    console.log(`DonnÃ©es retournÃ©es: ${data.length} enregistrements`);
    return res.json(data);
  } catch (error) {
    console.error(
      "Erreur lors de la rÃ©cupÃ©ration des valeurs de tempÃ©rature:",
      error
    );
    return res.status(500).json({ error: `Erreur serveur: ${error.message}` });
  }
});

export const getAllHumidityValues = asyncWrapper(async (req, res) => {
  console.log("ğŸŸ¦ [HUMIDITY] RequÃªte reÃ§ue");
  console.log("ğŸŸ¦ [HUMIDITY] Query params:", req.query);

  const { startTime, endTime } = req.query;

  // Si des paramÃ¨tres de temps sont fournis, les utiliser pour filtrer
  if (startTime && endTime) {
    console.log(
      `ğŸŸ¦ [HUMIDITY] RequÃªte avec filtres: startTime=${startTime}, endTime=${endTime}`
    );

    // S'assurer que les timestamps sont des nombres
    let startTimestamp, endTimestamp;
    try {
      startTimestamp = Number(startTime);
      endTimestamp = Number(endTime);

      if (isNaN(startTimestamp) || isNaN(endTimestamp)) {
        console.log("ğŸ”´ [HUMIDITY] Timestamps invalides");
        return res
          .status(400)
          .json({ error: "Les timestamps doivent Ãªtre des nombres" });
      }
      console.log(
        `ğŸŸ¦ [HUMIDITY] Timestamps convertis: start=${startTimestamp}, end=${endTimestamp}`
      );
      let data = await sensorService.getHumidityValuesBetween(
        startTimestamp,
        endTimestamp
      );

      console.log("ğŸŸ¨ [HUMIDITY] Data aprÃ¨s getHumidityValuesBetween:", data);
      console.log("ğŸŸ¨ [HUMIDITY] Type de data:", typeof data);
      console.log("ğŸŸ¨ [HUMIDITY] Array.isArray(data):", Array.isArray(data));
      console.log("ğŸŸ¨ [HUMIDITY] data.length:", data?.length);

      // Si aucune donnÃ©e trouvÃ©e, essayer de rÃ©cupÃ©rer les derniÃ¨res donnÃ©es disponibles
      if (!data || (Array.isArray(data) && data.length === 0)) {
        console.log(
          "ğŸŸ¨ [HUMIDITY] Aucune donnÃ©e dans la pÃ©riode, rÃ©cupÃ©ration des derniÃ¨res donnÃ©es"
        );
        data = await sensorService.getAllHumidityValues();
        console.log(
          "ğŸŸ¨ [HUMIDITY] Data aprÃ¨s getAllHumidityValues:",
          data?.length || 0,
          "Ã©lÃ©ments"
        );
        // Limiter aux 50 derniers points pour Ã©viter de surcharger l'interface
        if (data && Array.isArray(data) && data.length > 50) {
          data = data.slice(0, 50);
        }
      }

      console.log(
        `ğŸŸ¢ [HUMIDITY] DonnÃ©es retournÃ©es:`,
        data?.length || 0,
        "enregistrements"
      );
      console.log(`ğŸŸ¢ [HUMIDITY] Premier Ã©lÃ©ment:`, data?.[0]);
      return res.json(data);
    } catch (error) {
      console.error(
        "ğŸ”´ [HUMIDITY] Erreur lors de la rÃ©cupÃ©ration des valeurs d'humiditÃ©:",
        error
      );
      return res
        .status(500)
        .json({ error: `Erreur serveur: ${error.message}` });
    }
  }

  // Sinon, retourner toutes les valeurs
  console.log("ğŸŸ¦ [HUMIDITY] RÃ©cupÃ©ration de toutes les valeurs");
  try {
    const data = await sensorService.getAllHumidityValues();
    console.log(
      `ğŸŸ¢ [HUMIDITY] Toutes les donnÃ©es retournÃ©es:`,
      data.length,
      "enregistrements"
    );
    console.log(`ğŸŸ¢ [HUMIDITY] Premier Ã©lÃ©ment:`, data[0]);
    res.json(data);
  } catch (error) {
    console.error(
      "ğŸ”´ [HUMIDITY] Erreur lors de la rÃ©cupÃ©ration de toutes les valeurs:",
      error
    );
    res.status(500).json({ error: `Erreur serveur: ${error.message}` });
  }
});

export const getHumidityValuesBetween = asyncWrapper(async (req, res) => {
  const { start, end } = req.query;
  if (!start || !end) {
    return res
      .status(400)
      .json({ error: "Les paramÃ¨tres start et end sont requis" });
  }

  console.log(
    `RequÃªte getHumidityValuesBetween reÃ§ue avec start=${start}, end=${end}`
  );

  // S'assurer que les timestamps sont des nombres
  let startTimestamp, endTimestamp;
  try {
    startTimestamp = Number(start);
    endTimestamp = Number(end);

    if (isNaN(startTimestamp) || isNaN(endTimestamp)) {
      return res
        .status(400)
        .json({ error: "Les timestamps doivent Ãªtre des nombres" });
    }

    console.log(
      `Timestamps convertis: start=${startTimestamp}, end=${endTimestamp}`
    );

    const data = await sensorService.getHumidityValuesBetween(
      startTimestamp,
      endTimestamp
    );
    console.log(`DonnÃ©es retournÃ©es: ${data.length} enregistrements`);
    return res.json(data);
  } catch (error) {
    console.error(
      "Erreur lors de la rÃ©cupÃ©ration des valeurs d'humiditÃ©:",
      error
    );
    return res.status(500).json({ error: `Erreur serveur: ${error.message}` });
  }
});

export const getLatestSensorData = asyncWrapper(async (req, res) => {
  const data = await sensorService.getLatestSensorData();
  res.json(data);
});
